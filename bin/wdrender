#!/usr/bin/perl
#
#  This file is part of WebDyne.
#
#  This software is copyright (c) 2025 by Andrew Speer <andrew.speer@isolutions.com.au>.
#
#  This is free software; you can redistribute it and/or modify it under
#  the same terms as the Perl 5 programming language system itself.
#
#  Full license text is available at:
#
#  <http://dev.perl.org/licenses/>
#


#
#  Compile and/or show compiled version of WebDyne HTML scripts
#
package main;


#  Compiler pragma
#
use strict qw(vars);
use vars   qw($VERSION);


#  Use the base module
#
use WebDyne::Util;


#  Other external modules
#
use WebDyne;
use WebDyne::Request::Fake;
use Getopt::Long;
use Pod::Usage;
use IO::File;
use File::Spec;
use FindBin qw($RealBin $Script);


#  Error handling
#
use Carp;
$SIG{__DIE__}=\&Carp::confess;


#  Version Info, must be all one line for MakeMaker, CPAN.
#
$VERSION='2.011_264';


#  Run main
#
exit ${&main(\@ARGV) || die errdump()};

#===================================================================================================

sub main {


    #  Get argv array ref
    #
    my $argv_ar=shift();


    #  Defaul options
    #
    my %opt=(

        handler => $ENV{'WebDyneHandler'} || 'WebDyne',
        error   => 'text',
        header  => 0,
        warn    => 0,

    );


    #  Get command line options
    #
    GetOptions(
        \%opt,
        'help|?',
        'handler=s',
        'status=s',
        'header!',
        'warn!',
        'error=s',
        'headers_out|header_out=s@',
        'headers_in|header_in=s@',
        'outfile=s',
        'repeat|r|num|n=s',
        'loop',
        'man',
        'version'
    ) || pod2usage(2);
    pod2usage(-verbose => 99, -sections => 'SYNOPSIS|OPTIONS', -exitval => 1) if $opt{'help'};
    pod2usage(-verbose => 2)                                                  if $opt{'man'};
    $opt{'version'} && do {
        print "$Script version: $VERSION\n";
        print "WebDyne version: $WebDyne::VERSION ($WebDyne::VERSION_GIT_REF)\n";
        exit 0
    };


    #  Is dest file set ? If so open
    #
    my $dest_fh;
    if (my $dest_fn=$opt{'outfile'}) {
        $dest_fh=IO::File->new($dest_fn, O_CREAT | O_TRUNC | O_WRONLY) ||
            return err("unable to open file $dest_fn for output, $!");
    }


    #  Get srce file, add to options
    #
    my $srce_fn=shift(@{$argv_ar}) ||
        pod2usage("$Script: no source file specified !");
    (-f $srce_fn) ||
        pod2usage("$Script: input file not found !");


    #  Split out header in/out arrays as Request::Fake uses hash to hold them (should be array one day)
    #
    my ($header_out_ar, $header_in_ar)=map {delete $opt{$_}} qw(
        headers_out
        headers_in
    );


    #  Get new request object
    #
    LOOP: while (1) {
        for (1..($opt{'repeat'} || 1)) {

            #  Get new request handler
            #
            my $r=WebDyne::Request::Fake->new(

                filename => $srce_fn,
                %opt

                #select          =>  $dest_fh,
                #status          =>  $opt{'status'},

            ) || return err();


            #  Set headers
            #
            foreach my $header_out (@{$header_out_ar}) {
                my ($k, $v)=split(/\s*:\s*/, $header_out);
                $r->headers_out($k, $v);
            }
            foreach my $header_in (@{$header_in_ar}) {
                my ($k, $v)=split(/\s*:\s*/, $header_in);
                $r->headers_in($k, $v);
            }


            #  Get handler
            #
            my $handler=$opt{'handler'};


            #  Load up whichever handler we are using
            #
            eval("require $handler") ||
                return err("$Script: unable to load handler $handler, $@");


            #  Set text errors only
            #
            $WebDyne::Err::WEBDYNE_ERROR_TEXT=1 if ($opt{'error'} eq 'text');


            #  Set header, warning output
            #
            #$r->notes('noheader', $opt{'header'} ? 0 : 1);
            #$r->notes('nowarn',   $opt{'warn'} ? 0 : 1);


            #  Run it and display results, or any error generated
            #
            defined($handler->handler($r)) || return err();
            print $/;

            #my $gladiator_ar=Devel::Gladiator::walk_arena();


            #  Manual cleanup
            #
            $r->DESTROY();

            #print("SV: ",  scalar @{$gladiator_ar}, "\n") if $opt{'leak'};
            #@{$gladiator_ar} = ();

        }

        last LOOP unless $opt{'loop'};
    }


    #  Done, return success
    #
    \undef;

}


__END__

# Documentation in Markdown. Convert to POD using markpod from 
#
# https://github.com/aspeer/pl-markpod.git 

=begin markdown

# NAME

wdrender - Compile and/or show compiled version of WebDyne pages

# SYNOPSIS

`wdrender [--option] <filename>`

`wdrender time.psp`

# DESCRIPTION

`wdrender` will compile and/or show the compiled version of WebDyne HTML page.
It supports various command-line options to customize the compilation process. Output is printed to STDOUT in the form of a Perl data structure representing
the compiled .psp page.

# OPTIONS

- `--help | -?`
  Display a brief help message and exit.

- `--handler`
  Specify the handler to use (default: WebDyne).

- `--status`
  Specify the status.

- `--header`
  Include headers in the output.

- `--error`
  Specify the error format (default: text).

- `--headers_out | --header_out`
  Specify headers to include in the output.

- `--headers_in | --header_in`
  Specify headers to include in the input.

- `--outfile`
  Specify the output file.

- `--repeat | --r | --num | --n`
  Specify the number of times to repeat the rendering.

- `--loop`
  Enable looping. Used for leak testing.

- `--man`
  Display the full manual.

- `--version`
  Display the script version and exit.


# EXAMPLES

```sh
# Show the HTML rendered version of time.psp
wdrender time.psp
```

```sh
# Show the HTML rendered version of time.psp with headers
wdrender --header time.psp
```

# AUTHOR

Andrew Speer <andrew.speer@isolutions.com.au>

# LICENSE and COPYRIGHT

This file is part of WebDyne.

This software is copyright (c) 2025 by Andrew Speer <andrew.speer@isolutions.com.au>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

Full license text is available at:

<http://dev.perl.org/licenses/>

=end markdown


=head1 NAME

wdrender - Compile and/or show compiled version of WebDyne pages


=head1 SYNOPSIS

C<<< wdrender [--option] <filename> >>>

C<wdrender time.psp>


=head1 DESCRIPTION

C<wdrender> will compile and/or show the compiled version of WebDyne HTML page.
It supports various command-line options to customize the compilation process. Output is printed to STDOUT in the form of a Perl data structure representing
the compiled .psp page.


=head1 OPTIONS

=over

=item -

C<--help | -?>
  Display a brief help message and exit.



=item -

C<--handler>
  Specify the handler to use (default: WebDyne).



=item -

C<--status>
  Specify the status.



=item -

C<--header>
  Include headers in the output.



=item -

C<--error>
  Specify the error format (default: text).



=item -

C<--headers_out | --header_out>
  Specify headers to include in the output.



=item -

C<--headers_in | --header_in>
  Specify headers to include in the input.



=item -

C<--outfile>
  Specify the output file.



=item -

C<--repeat | --r | --num | --n>
  Specify the number of times to repeat the rendering.



=item -

C<--loop>
  Enable looping. Used for leak testing.



=item -

C<--man>
  Display the full manual.



=item -

C<--version>
  Display the script version and exit.



=back


=head1 EXAMPLES


 # Show the HTML rendered version of time.psp
 wdrender time.psp

 # Show the HTML rendered version of time.psp with headers
 wdrender --header time.psp

=head1 AUTHOR

Andrew Speer L<mailto:andrew.speer@isolutions.com.au>


=head1 LICENSE and COPYRIGHT

This file is part of WebDyne.

This software is copyright (c) 2025 by Andrew Speer L<mailto:andrew.speer@isolutions.com.au>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

Full license text is available at:

L<http://dev.perl.org/licenses/>

=cut
