#!/usr/bin/perl
#
#  This file is part of WebDyne.
#
#  This software is Copyright (c) 2024 by Andrew Speer <andrew@webdyne.org>.
#
#  This is free software, licensed under:
#
#    The GNU General Public License, Version 2, June 1991
#
#  Full license text is available at:
#
#  <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
#

#
#  Compile and/or show compiled version of WebDyne HTML scripts
#
package main;


#  Compiler pragma
#
sub BEGIN {

    #  Massage warnings and @INC path
    $^W=0;
    use File::Spec;
    use FindBin qw($RealBin $Script);
}
use strict qw(vars);
use vars qw($VERSION);


#  Use the base module
#
use WebDyne::Base;


#  Other external modules
#
use WebDyne;
use WebDyne::Request::Fake;
use Getopt::Long;
use Pod::Usage;
use IO::File;


#  Version Info, must be all one line for MakeMaker, CPAN.
#
$VERSION='1.250';


#  Run main
#
exit ${&main(\@ARGV) || die errdump()};

#===================================================================================================


sub main {


    #  Get argv array ref
    #
    my $argv_ar=shift();


    #  Defaul options
    #
    my %opt=(

        handler => $ENV{'WebDyneHandler'} || 'WebDyne',
        error   => 'text',
        header  => 1,
        warn    => 1,

    );


    #  Get command line options
    #
    GetOptions(
        \%opt,
        'help|?',
        'handler=s',
        'status=s',
        'header!',
        'warn!',
        'error=s',
        'header_out=s@',
        'header_in=s@',
        'outfile=s',
        'man',
        'version'
    ) || pod2usage(2);
    pod2usage(-verbose => 99, -sections => 'Synopsis|Options', -exitval => 1) if $opt{'help'};
    pod2usage(-verbose => 2) if $opt{'man'};
    $opt{'version'} && do {
        print "$Script version: $VERSION\n";
        print "WebDyne version: $WebDyne::VERSION\n";
        exit 0
    };


    #  Is dest file set ? If so open
    #
    my $dest_fh;
    if (my $dest_fn=$opt{'outfile'}) {
        $dest_fh=IO::File->new($dest_fn, O_CREAT | O_TRUNC | O_WRONLY) ||
            return err ("unable to open file $dest_fn for output, $!");
    }


    #  Get srce file, add to options
    #
    my $srce_fn=shift(@{$argv_ar}) ||
        pod2usage("$Script: no source file specified !");
    (-f $srce_fn) ||
        pod2usage("$Script: input file not found !");


    #  Get new request object
    #
    my $r=WebDyne::Request::Fake->new(

        filename => $srce_fn,

        #select          =>  $dest_fh,
        #status          =>  $opt{'status'},

    ) || return err ();


    #  Set headers
    #
    foreach my $header_out (@{$opt{'header_out0'}}) {
        my ($k, $v)=split(/\s*:\s*/, $header_out);
        $r->headers_out($k, $v);
    }
    foreach my $header_in (@{$opt{'header_in0'}}) {
        my ($k, $v)=split(/\s*:\s*/, $header_in);
        $r->headers_in($k, $v);
    }


    #  Get handler
    #
    my $handler=$opt{'handler'};


    #  Load up whichever handler we are using
    #
    eval("require $handler") ||
        return err ("$Script: unable to load handler $handler, $@");


    #  Set text errors only
    #
    $WebDyne::Err::WEBDYNE_ERROR_TEXT=1 if ($opt{'error'} eq 'text');


    #  Set header, warning output
    #
    $r->notes('noheader', !$opt{'header'});
    $r->notes('nowarn',   !$opt{'warn'});


    #  Run it and display results, or any error generated
    #
    defined($handler->handler($r)) || return err ();


    #  Manual cleanup
    #
    $r->DESTROY();


    #  Done, return success
    #
    \undef;

}


__END__

=begin markdown


=end markdown


=cut
